/*
 * This file is generated by jOOQ.
 */
package com.example.api.driver.db.tables.records


import com.example.api.driver.db.tables.Databasechangeloglock

import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DatabasechangeloglockRecord() : UpdatableRecordImpl<DatabasechangeloglockRecord>(Databasechangeloglock.DATABASECHANGELOGLOCK) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var locked: Boolean?
        set(value): Unit = set(1, value)
        get(): Boolean? = get(1) as Boolean?

    open var lockgranted: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var lockedby: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised DatabasechangeloglockRecord
     */
    constructor(id: Int? = null, locked: Boolean? = null, lockgranted: LocalDateTime? = null, lockedby: String? = null): this() {
        this.id = id
        this.locked = locked
        this.lockgranted = lockgranted
        this.lockedby = lockedby
        resetChangedOnNotNull()
    }
}
