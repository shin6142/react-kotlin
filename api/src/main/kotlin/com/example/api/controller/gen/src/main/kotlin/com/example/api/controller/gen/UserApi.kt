/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.example.api.controller.gen

import com.example.api.controller.gen.CreateUser
import com.example.api.controller.gen.User
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface UserApi {

    @Operation(
        tags = ["user",],
        summary = "",
        operationId = "createUser",
        description = """create user""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = User::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/user"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun createUser(@Parameter(description = "", required = true) @Valid @RequestBody createUser: CreateUser): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["user",],
        summary = "",
        operationId = "getUser",
        description = """get users""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = User::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/user/{userId}"],
            produces = ["application/json"]
    )
    fun getUser(@Parameter(description = "user id", required = true) @PathVariable("userId") userId: java.util.UUID): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["user",],
        summary = "",
        operationId = "getUsers",
        description = """get users""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(array = ArraySchema(schema = Schema(implementation = User::class)))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users"],
            produces = ["application/json"]
    )
    fun getUsers(): ResponseEntity<List<User>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
